namespace AgileFramework.Security.Exchange.Data.TextConverters
{
    internal struct RecognizeInterestingFontNameInInlineStyle
    {
        private static byte[] CharMapToClass = new byte[]
        {
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            1,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            1,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            17,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            14,
            2,
            0,
            0,
            0,
            0,
            0,
            18,
            11,
            0,
            7,
            0,
            15,
            6,
            0,
            4,
            0,
            0,
            13,
            10,
            5,
            12,
            0,
            0,
            0,
            8,
            16,
            0,
            0,
            3,
            0,
            9,
            0,
            0,
            0,
            0,
            0,
            0,
            0,
            18,
            11,
            0,
            7,
            0,
            15,
            6,
            0,
            4,
            0,
            0,
            13,
            10,
            5,
            12,
            0,
            0,
            0,
            8,
            16,
            0,
            0,
            3,
            0,
            9,
            0,
            0,
            0,
            0,
            0,
            0
        };

        private static sbyte[,] StateTransitionTable = new sbyte[,]
        {
            {
                1,
                0,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                2,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                3,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                4,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                5,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                6,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                7,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                8
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                9,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                10,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                11,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                1,
                0,
                1,
                1,
                1,
                1,
                1,
                1,
                12,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1
            },
            {
                1,
                12,
                -1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                1,
                13,
                1,
                1,
                1,
                1
            },
            {
                -1,
                13,
                -1,
                14,
                -1,
                -1,
                -1,
                -1,
                23,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                15,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                16,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                17,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                18,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                19,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                20,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                21,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                22,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                22,
                -2,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                24,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                25,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                26,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                27,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                28,
                -1,
                -1,
                -1,
                -1,
                -1
            },
            {
                -1,
                28,
                -3,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1,
                -1
            }
        };

        private sbyte state;

        /// <summary>
        /// Gets the text mapping.
        /// </summary>
        /// <value>The text mapping.</value>
        public TextMapping TextMapping
        {
            get
            {
                sbyte b = state;
                switch (b)
                {
                    case -3:
                        break;
                    case -2:
                        return TextMapping.Wingdings;
                    default:
                        if (b == 22)
                        {
                            return TextMapping.Wingdings;
                        }
                        if (b != 28)
                        {
                            return TextMapping.Unicode;
                        }
                        break;
                }
                return TextMapping.Symbol;
            }
        }

        /// <summary>
        /// Gets a value indicating whether this instance is finished.
        /// </summary>
        /// <value>
        /// 	<c>true</c> if this instance is finished; otherwise, <c>false</c>.
        /// </value>
        public bool IsFinished
        {
            get
            {
                return state < 0;
            }
        }

        public void AddCharacter(char ch)
        {
            if (state >= 0)
            {
                state = StateTransitionTable[state, (ch > '\u007f') ? 0 : CharMapToClass[ch]];
            }
        }
    }
}
